#!/usr/bin/env python3
import sys
import argparse
import re


class Main:

    def __init__(self, params):
        # collect the arguments
        self.params = None
        self.is_scrambled: bool = True
        self.set_params(params)

    def get_is_scrambled(self):
        """
        This will return the is_scrambled.
        """
        return self.is_scrambled

    def set_is_scrambled(self, new_is_scrambled):
        """
        This will set the is_scrambled.
        """
        self.is_scrambled = new_is_scrambled

    def get_params(self):
        """
        This will get the parameters.
        """
        return self.params

    def set_params(self, params):
        """
        This will set the params.
        """
        self.params = params

    def parse_params(self):
        """
        This method will parse the parameters.
        """
        parser = argparse.ArgumentParser(
            description="Get the hex with a buffer overflow on the netcat server with: '%X' * 128")
        parser.add_argument(
            "--hex", help="The hex code from picoCTF.", required=True)
        self.set_params(parser.parse_args(self.get_params()))

    def run(self):
        """
        This method will run the netcat.
        """
        res = self.hex_to_ascii(self.get_params().hex)
        f = self.select_flag(res)
        flag = self.unscramble(f)
        return flag

    @staticmethod
    def hex_to_ascii(hex_):
        """
        This method converts hex code to ascii code.
        :HEX: THe hex string.
        :return: The given hex str in ascii representation.
        """
        res = ''.join([chr(int(''.join(c), 16)) for c in zip(hex_[0::2], hex_[1::2])]).replace(';', '\n- ')
        return res

    def select_flag(self, flag_string):
        """
        This method will select the flag from the string with regex.
        :flag_string: The string
        :return: The flag.
        """
        if self.get_is_scrambled():
            flag = re.findall(r"ocip{.*?}", flag_string)
        else:
            flag = re.findall(r"picoCTF{.*?}", flag_string)
        return flag[0]

    def unscramble(self, string_from_input):
        jumbled = string_from_input
        blocks = []
        for i in range(0, len(jumbled), 4):
            chunk = jumbled[i:]
            if len(chunk) > 4:
                chunk = chunk[0:4]

            blocks.append("".join(chunk))

        flag = ""
        for block in blocks:
            flag = flag + block[::-1]
        self.set_is_scrambled(False)
        flag = self.select_flag(flag)
        return flag


if __name__ == "__main__":
    decode = Main(sys.argv[1:])
    decode.parse_params()
    print(decode.run())
